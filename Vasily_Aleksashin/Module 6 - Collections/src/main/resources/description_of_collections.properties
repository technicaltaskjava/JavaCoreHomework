# suppress inspection "UnusedProperty" for whole file
# suppress inspection "UnusedProperty" for whole file
# suppress inspection "UnusedProperty" for whole file
# suppress inspection "UnusedProperty" for whole file
# suppress inspection "UnusedProperty" for whole file
# suppress inspection "UnusedProperty" for whole file
# suppress inspection "UnusedProperty" for whole file
# suppress inspection "UnusedProperty" for whole file
#Set
Set.functionality=A collection that contains no duplicate elements. More formally, sets contain no pair of elements e1 and e2 such that e1.equals(e2), and at most one null element.
Set.typicalUsage=Remembering "which items you've already processed", e.g. when doing a web crawl. Making other yes-no decisions about an item, e.g. "is the item a word of English", "is the item in the database?" , "is the item in this category?"
#List
List.functionality=An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.
List.typicalUsage=Most cases where you just need to store or iterate through a "bunch of things" and later iterate through them.
#Map
Map.functionality=An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value.
Map.typicalUsage=Used in cases where you need to say "for a given X, what is the Y"? It is often useful for implementing in-memory caches or indexes. For example: For a given user ID, what is their cached name/User object? For a given IP address, what is the cached country code? For a given string, how many instances have I seen?
#Queue
Queue.functionality=An interface that represents a Collection where elements are, typically, added to one end, and removed from the other (FIFO).
Queue.typicalUsage=Often used in managing tasks performed by different threads in an application (e.g. one thread receives incoming connections and puts them on a queue; other "worker" threads take connections off the queue for processing). For traversing hierarchical structures such as a filing system, or in general where you need to remember "what data to process next", whilst also adding to that list of data. Related to the previous point, queues crop up in various algorithms, e.g. build the encoding tree for Huffman compression.